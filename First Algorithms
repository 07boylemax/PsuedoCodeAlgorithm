   LOAD MENU ALGORITHM

  /Menu

MakeVisible MenuBackground
MakeVisible MenuButtons
Initialise KnightPosition
Initialise EnemyPositions
  Knight Movement = 0
  Enemy Movement = 0

 /View Power-up Key

Menu = Visible
  If btnPowerup = Clicked
    Display MenuPowerup
  Else
  
 /Go Back

If MenuPowerup = Visible
  If btnGoBack = Clicked
    Display MenuBackground
    Display MenuButtons
  Else
Else

/Make Menu Invisible
 
  Hide MenuBackground
  Hide MenuButtons
   If LevelBackground = Invisible
      Make LevelBackground Visible
   Else
    
  
/Load Knight Positions, Power-ups, Enemy positions.

Place pictureboxKnight = X:0 Y:0
Load ArrayEnemyLocations
  Place EnemyPositions
Load ArrayPowerUp
  Place PowerUpPositions
 
/Side Scrolling - Keep Camera On Knight

KnightPlacement = X:0 Y:0
When LeftKey Pressed
  Move screen Right
When RightKey Pressed
  Move Screen Left

/Collision Detection - Enemy - Other Enemies

If EnemySprite(x) = Facing Left
  If EnemySprite(y) = Facing Right
    When EnemySprite(X) Touches EnemySprite(y)            
      EnemySprite(x) Face Right
      EnemySprite(y) Face Left
      
If EnemySprite(x) = Facing right
  If EnemySprite(y) = Facing left
    When EnemySprite(X) Touches EnemySprite(y)
      EnemySprite(X) Face left
      EnemySprite2(Y) Face right


 /Collision Detection - Enemy - Walls
 While EnemySprite(x) = Moving
   If EnemySprite reaches X:(x) Y:(x)                  // you should have an array to hold the enemies - DIM Enemy(0 to [however enemies you are having])
     Change Sprite Animation                            // you can look at my enemy array to get an idea
     Change Sprite Direction
   Else
 Else

 /Collision Detection - Knight - Other Enemies

 If picKnight.Bounds.IntersectsWith(picEnemySprite) on Y Then
   picEnemySprite hide
 Else
 If picKnight.Bounds.IntersectsWith(picEnemySprite) on x Then
   Health = Health - 1
   picKnight forcejump




 /Collision Detection - Knight - Walls

Dim KnightRight as Integer
Dim KnightLeft as Integer
Dim KnightTop as Integer
Dim KnightBottom as Integer
KnightRight = picKnight.left + picKnight.Width
KnightLeft = picKnight.left
KnightTop = picKnight.top
KnightBottom = picKnight.top + picKnight.Height
If (KnightRight >= WallLeft) And (KnightRight <= WallRight) Then
  Case Keys.right
	Pos.x += 0
	Dir = "right"
If (KnightLeft >= WallRight) And (KnightLeft <= WallLeft) Then
  Case Keys.left
  	pos.x +=0
	Dir = "Left"

/Enemy Movement - Walking Repetition

While EnemyAlive = 1
  EnemyMovement = Speed(x)
Else
  EnemyMovement = Speed(0)                 // Is there a speed subroutine? Because that's what you are referencing here

 /Enemy Movement - Jumping Repetition

While EnemyAlive = 1
  EnemyMovement = Speed(x)
  Jump = 1
Else
  EnemyMovement = Speed(0)
  Jump = 0


 /Enemy Movememnt - Jumping Repetition - Gravity Emulation


Private Sub Timer2_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Timer2.Tick
	If GlobalInt = 0
		Int += 1
	Else
EndIf
If JumpPowerUp = 1
	If GlobalInt => 1
		Select Case Global Int
		Case 1
		Knight.Top -= 9
		Case 2
		Knight.Top -= 6
		Case 3
		Knight.Top -= 4
		Case 4
		Knight.Top += 4
		Case 5
		Knight.Top += 6
		Case 6
		Knight.Top += 9
		GLobalInt = 0
		Timer2.Enabled = False
		End Select
		GlobalInt += 1
	Else
If JumpPowerUp = 0
	If GlobalInt => 1
		Select Case Global Int
		Case 1
		Knight.Top -= 8
		Case 2
		Knight.Top -= 5
		Case 3
		Knight.Top -= 3
		Case 4
		Knight.Top += 3
		Case 5
		Knight.Top += 5
		Case 6
		Knight.Top += 8
		GLobalInt = 0
		Timer2.Enabled = False
		End Select
		GlobalInt += 1
	Else


 /Knight Movement - Movement

Case Keys.Left
	Pos.X -= 2
	Dir = "left"
Case Keys.Right
	Pos.X += 2
	Dir = "right"
Case Keys.up
	TimerJump = True


 /Mechanics - PowerUp Systems - Invincibility

 If picKnight.Bounds.IntersectsWith(picInvincibility.Bounds) Then
	picInvincibility.Hide
	TempHealth = Health
	Health = 1000
	Timer = True
	When Timer = 0                                     
		Health = TempHealth
	Else

 /Mechanics - Powerup Systems - Increased Health

If picKnight.Bounds.IntersectsWith(picHealth.Bounds) Then
	picHealth.Hide
	Health = Health + 2

 /Mechanics - PowerUp Systems - Increased Speed

If picKnight.Bounds.IntersectsWith(picSpeed.Bounds) Then
	picSpeed.Hide
	Speed = Speed + 2
	PowerUpTimer = True
	When Timer = 0
		Speed = Speed - 2

 /Mechanics - PowerUp Systems - Increased Jump Height

If picKnight.Bounds.IntersectsWith(picJump.bounds) Then
	picJump.hide
	JumpPowerUp = 1
	PowerUpTimer = True
	When Timer = 0
		JumpPowerUp = 0
