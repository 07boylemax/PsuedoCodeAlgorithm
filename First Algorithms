   LOAD MENU ALGORITHM

  /Menu

MakeVisible MenuBackground
MakeVisible MenuButtons
Initialise KnightPosition
Initialise EnemyPositions
  Knight Movement = 0
  Enemy Movement = 0

 /View Power-up Key

Menu = Visible
  If btnPowerup = Clicked
    Display MenuPowerup
  Else
  
 /Go Back

If MenuPowerup = Visible
  If btnGoBack = Clicked
    Display MenuBackground
    Display MenuButtons
  Else
Else

/Make Menu Invisible
 
  Hide MenuBackground
  Hide MenuButtons
   If LevelBackground = Invisible
      Make LevelBackground Visible
   Else
    
  
/Load Knight Positions, Power-ups, Enemy positions.

Place pictureboxKnight = X:0 Y:0
Load ArrayEnemyLocations
  Place EnemyPositions
Load ArrayPowerUp
  Place PowerUpPositions
 
/Side Scrolling - Keep Camera On Knight

KnightPlacement = X:0 Y:0
When LeftKey Pressed
  Move screen Right
When RightKey Pressed
  Move Screen Left

/Collision Detection - Enemy - Other Enemies

If EnemySprite1 = Facing Left
  If EnemySprite2 = Facing Right
    When EnemySprite1 Touches EnemySprite2
      EnemySprite1 Face Right
      EnemySprite2 Face Left
      
If EnemySprite1 = Facing right
  If EnemySprite2 = Facing left
    When EnemySprite1 Touches EnemySprite2
      EnemySprite1 Face left
      EnemySprite2 Face right


 /Collision Detection - Enemy - Walls
 
 While EnemySprite1 = Moving
   If EnemySprite1 reaches X:(x) Y:(x)
     Change Sprite Animation
     Change Sprite Direction
   Else
 Else

 /Collision Detection - Knight - Other Enemies

 If picKnight.Bounds.IntersectsWith(picEnemySprite) on Y Then
   picEnemySprite hide
 Else
 If picKnight.Bounds.IntersectsWith(picEnemySprite) on x Then
   Health = Health - 1
   picKnight forcejump




 /Collision Detection - Knight - Walls

Dim KnightRight as Integer
Dim KnightLeft as Integer
Dim KnightTop as Integer
Dim KnightBottom as Integer
KnightRight = picKnight.left + picKnight.Width
KnightLeft = picKnight.left
KnightTop = picKnight.top
KnightBottom = picKnight.top + picKnight.Height
If (KnightRight >= WallLeft) And (KnightRight <= WallRight) Then
  Case Keys.right
	Pos.x += 0
	Dir = "right"


/Enemy Movement - Walking Repetition

While EnemyAlive = 1
  EnemyMovement = Speed(x)
Else
  EnemyMovement = Speed(0)

 /Enemy Movement - Jumping Repetition

While EnemyAlive = 1
  EnemyMovement = Speed(x)
  Jump = 1
Else
  EnemyMovement = Speed(0)
  Jump = 0





 /Enemy Movememnt - Jumping Repetition - Gravity Emulation






 /Knight Movement - Movement

Case Keys.Left
	Pos.X -= 2
	Dir = "left"
Case Keys.Up
	Pos.Y -= 2
	Dir = "up"
Case Keys.Right
	Pos.X += 2
	Dir = "right"
Case Keys.Down
	Pos.Y += 2
	Dir = "down"



 /Mechanics - PowerUp Systems - Invincibility

 If picKnight.Bounds.IntersectsWith(picInvincibility.Bounds) Then
	picInvincibility.Hide
	TempHealth = Health
	Health = 1000
	Timer = True
	When Timer = 0
		Health = TempHealth
	Else

 /Mechanics - Powerup Systems - Increased Health

If picKnight.Bounds.IntersectsWith(picHealth.Bounds) Then
	picHealth.Hide
	Health = Health + 2

 /Mechanics - PowerUp Systems - Increased Speed

If picKnight.Bounds.IntersectsWith(picSpeed.Bounds) Then
	picSpeed.Hide
	Speed = Speed + 2
	Timer = True
	When Timer = 0
		Speed = Speed - 2

 /Mechanics - PowerUp Systems - Increased Jump Height

If picKnight.Bounds.IntersectsWith(picJump.Bounds) Then
	

